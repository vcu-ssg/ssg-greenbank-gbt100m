---
title: "COLMAP Tuning Report"
format: html
---

```{python}
import subprocess
import os
import re
import pandas as pd
from pathlib import Path

# Base path to colmap-tuning
base_path = Path("../data/colmap-tuning")

# Collect results
results = []

# Loop over each scenario
for scenario in sorted(base_path.glob("*/sparse/0")):
    
    scenario_name = scenario.parents[1].name
    scenario_path = scenario.as_posix()

    try:
        # Run model_analyzer and capture output
        output = subprocess.check_output([
            "colmap",
            "model_analyzer",
            f"--path={scenario_path}"
        ], text=True,stderr=subprocess.STDOUT)
        
        # Parse output with regex
        stats = {}
        stats["Scenario"] = scenario_name

        patterns = {
            "Cameras": r"\]\s+Cameras:\s+(\d+)",
            "Images": r"\]\s+Images:\s+(\d+)",
            "Registered Images": r"\]\s+Registered images:\s+(\d+)",
            "Points3D": r"\]\s+Points:\s+(\d+)",
            "Observations": r"\]\s+Observations:\s+(\d+)",
            "Mean Track Length": r"\]\s+Mean track length:\s+([\d\.]+)",
            "Mean Observations per Image": r"\]\s+Mean observations per image:\s+([\d\.]+)",
            "Mean Reprojection Error": r"\]\s+Mean reprojection error:\s+([\d\.]+)"
        }

        for key, pattern in patterns.items():
            stats[key] = "?"  # default if not matched
            for line in output.splitlines():
                print(f"\t{line}")
                match = re.search(pattern, line)
                if match:
                    stats[key] = match.group(1)
                    break  # move to next pattern

        results.append(stats)
    
    except subprocess.CalledProcessError as e:
        print(f"❌ Error analyzing {scenario_name}: {e}")

# Build DataFrame
df = pd.DataFrame(results)

# Format numbers
df["Mean Reprojection Error"] = pd.to_numeric(df["Mean Reprojection Error"], errors="coerce")
df["Mean Track Length"] = pd.to_numeric(df["Mean Track Length"], errors="coerce")
df["Registered Images"] = pd.to_numeric(df["Registered Images"], errors="coerce")
df["Points3D"] = pd.to_numeric(df["Points3D"], errors="coerce")

# Sort by Scenario (optional)
df = df.sort_values("Scenario").reset_index(drop=True)

# Display
df

```


Great — this is a rich dataset for analysis. Let's compare the impact of **FPS** and **greyscale vs original** on model quality across all scenarios.

---

## 📊 Key Metrics to Evaluate

| Metric                        | Meaning                           | Goal                              |
| ----------------------------- | --------------------------------- | --------------------------------- |
| `Points3D`                    | Number of 3D points reconstructed | Higher is better (more detail)    |
| `Mean Reprojection Error`     | Average pixel reprojection error  | Lower is better (better accuracy) |
| `Mean Track Length`           | Avg number of frames per 3D point | Higher is better (robustness)     |
| `Mean Observations per Image` | Avg features per frame            | Higher is better (frame quality)  |

---

## 🧠 Observations

### ✅ Original > Greyscale — consistently

Across all matching FPS, the **original (RGB)** images produce:

* **More 3D points**
* **Longer track lengths**
* **More observations per image**
* **Lower or comparable reprojection error**

#### Examples:

**DJI\_0145 at FPS=1.80**

| Type      | Points3D | Mean Reproj. Err. |
| --------- | -------- | ----------------- |
| Greyscale | 109,113  | 0.726 px          |
| Original  | 129,391  | 0.701 px ✅        |

**DJI\_0150 at FPS=1.60**

| Type      | Points3D | Mean Reproj. Err. |
| --------- | -------- | ----------------- |
| Greyscale | 95,763   | 0.758 px          |
| Original  | 103,068  | 0.736 px ✅        |

---

## 📈 Diminishing Returns with FPS

* As FPS increases, `Points3D` continues to rise but **more slowly**
* `Mean Reprojection Error` **slightly worsens** above FPS 1.60 — may indicate over-sampling / redundant views

---

## ✅ Best FPS Sweet Spot?

| FPS             | Gains Level Off?                                                    |
| --------------- | ------------------------------------------------------------------- |
| **1.40–1.60** ✅ | Still good gains, good accuracy                                     |
| **1.80** ⚠️     | Still better detail, but diminishing returns + slightly worse error |

---

## ✅ Best Overall Model?

Looking at all metrics, these 3 are **excellent** candidates:

### 1. **DJI\_0145-FPS-1.60-original**

* `Points3D`: **113,935**
* `Reproj Err`: **0.696 px**
* High track length (7.18), high observations per image

### 2. **DJI\_0146-FPS-1.60-original**

* `Points3D`: **99,912**
* `Reproj Err`: **0.900 px** (higher, but this dataset always has higher error)
* Very long track lengths (12.25)

### 3. **DJI\_0150-FPS-1.60-original**

* `Points3D`: **103,068**
* `Reproj Err`: **0.736 px**
* Solid balance between size and error

---

## 🚫 Not Recommended

* **Greyscale** models — consistently underperform originals
* **FPS > 1.60** — little gain, slightly higher reprojection error

---

## ✅ Recommendation

| Metric          | Best Choice               |
| --------------- | ------------------------- |
| Image Type      | **Original (RGB)**        |
| FPS             | **1.60** (best balance)   |
| Use Greyscale?  | ❌ No — lower quality      |
| Use 1.80 FPS?   | 🤔 Only if detail > error |
| Export This Set | Yes — you're ready 🚀     |


# Detailed look at FPS=1.60

Great — let’s now **compare the three filtering strategies at FPS = 1.60** across all three tracks (`DJI_0145`, `DJI_0146`, `DJI_0150`) using key quality metrics:

---

### 📊 Summary: FPS = 1.60 Comparison

| Track         | Strategy  | Points3D | Mean Track Length | Obs/Image | Reproj. Error |
| ------------- | --------- | -------- | ----------------- | --------- | ------------- |
| **DJI\_0145** | Greyscale | 96,103   | 6.73              | 2,652     | 0.7228        |
|               | Filtered  | 95,786   | 6.72              | 2,639     | 0.7223 ✅      |
|               | Original  | 113,935  | 7.18 ✅            | 3,353 ✅   | 0.6969 ✅      |
| **DJI\_0146** | Greyscale | 97,974   | 11.38             | 3,832     | 0.8951 ✅      |
|               | Filtered  | 98,548   | 11.44             | 3,875     | 0.8956        |
|               | Original  | 99,912   | 12.25 ✅           | 4,207 ✅   | 0.9005        |
| **DJI\_0150** | Greyscale | 95,763   | 6.17              | 2,787     | 0.7578        |
|               | Filtered  | 95,777   | 6.17              | 2,786 ✅   | 0.7576 ✅      |
|               | Original  | 103,068  | 6.24 ✅            | 3,032 ✅   | 0.7357 ✅      |

---

### ✅ Evaluation by Track

#### **DJI\_0145**

* **Original** wins in every category: most points, longest tracks, best error.

#### **DJI\_0146**

* **Greyscale** has the **lowest reprojection error**, but slightly fewer features.
* **Original** wins on track length and observations per image.
* **Filtered** is a good middle-ground, nearly matching both.

#### **DJI\_0150**

* **Original** again provides most structure and lowest reprojection error.
* **Filtered** and **greyscale** are nearly tied but inferior.

---

### 🏁 Overall Recommendation at FPS = 1.60

| Strategy        | Verdict                                                                                   |
| --------------- | ----------------------------------------------------------------------------------------- |
| **Original** ✅  | Best balance of feature count, track length, and reprojection error.                      |
| **Filtered** ⚖️ | Slightly fewer points and lower memory, good if you're trimming for performance.          |
| **Greyscale** ❌ | Only helpful in rare cases (e.g., DJI\_0146 reprojection error). Otherwise lower quality. |

