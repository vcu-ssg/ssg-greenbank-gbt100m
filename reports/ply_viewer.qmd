---
title: ply viewer
format:
  html:
    toc: true
    code-fold: true
    include-in-header: # This is a good place to include external JS libraries
      text: |
        <style>
          #threejs-container {
            width: 100%;
            height: 600px; /* Adjust height as needed */
            background-color: #f0f0f0; /* Light background for visibility */
            border: 1px solid #ccc;
            margin-top: 20px;
            box-shadow: 2px 2px 5px rgba(0,0,0,0.2);
          }
        </style>
---

```{python}
import shutil

input = "../projects/DJI_0145-jpg_base_1.60_1600/colmap/sparse/0_clean.ply"
output = "../docs/0_clean.ply"
shutil.copyfile( input, output )

```

## Interactive Sparse Model

```{=html}

<div id="threejs-container"></div>

<script type="module">
  import * as THREE from 'https://unpkg.com/three@0.165.0/build/three.module.js';
  import { PLYLoader } from 'https://unpkg.com/three@0.165.0/examples/jsm/loaders/PLYLoader.js';
  import { OrbitControls } from 'https://unpkg.com/three@0.165.0/examples/jsm/controls/OrbitControls.js';

  // --- Scene Setup ---
  const container = document.getElementById('threejs-container');
  const scene = new THREE.Scene();
  scene.background = new THREE.Color(0xf0f0f0); // Match container background

  const camera = new THREE.PerspectiveCamera(75, container.clientWidth / container.clientHeight, 0.1, 1000);
  camera.position.z = 5; // Initial camera position

  const renderer = new THREE.WebGLRenderer({ antialias: true });
  renderer.setSize(container.clientWidth, container.clientHeight);
  container.appendChild(renderer.domElement);

  // --- OrbitControls for interaction ---
  const controls = new OrbitControls(camera, renderer.domElement);
  controls.enableDamping = true; // For smoother camera movement
  controls.dampingFactor = 0.05;
  controls.screenSpacePanning = false; // Prevents moving target in screen space
  controls.minDistance = 0.1; // Closest you can zoom
  controls.maxDistance = 500; // Furthest you can zoom

  // --- PLY Loader ---
  const loader = new PLYLoader();

  // Replace 'sparse_points.ply' with the actual path to your exported COLMAP PLY file
  // Example: if it's in a 'data' folder next to your .qmd: './data/sparse_points.ply'
  const plyFilePath = './0_clean.ply';

  loader.load(
    plyFilePath,
    function (geometry) {
      // geometry will contain position and color attributes if present in the PLY
      geometry.computeBoundingBox(); // Calculate bounding box for centering

      const material = new THREE.PointsMaterial({
        size: 0.005, // Adjust point size as needed (e.g., 0.001 to 0.05)
        vertexColors: true // Important: tells material to use colors from geometry
      });

      const points = new THREE.Points(geometry, material);
      scene.add(points);

      // --- Center the model and adjust camera ---
      const boundingBox = geometry.boundingBox;
      const center = new THREE.Vector3();
      boundingBox.getCenter(center);
      points.position.sub(center); // Move the points so their center is at (0,0,0)

      // Adjust camera to view the entire model
      const size = new THREE.Vector3();
      boundingBox.getSize(size);
      const maxDim = Math.max(size.x, size.y, size.z);
      camera.position.set(center.x, center.y, center.z + maxDim * 1.5); // Move camera back
      controls.target.copy(center); // Set orbit control target to the model's center
      controls.update(); // Update controls after changing target/position

      console.log('PLY file loaded successfully!');
    },
    // Optional: Progress callback
    function (xhr) {
      console.log((xhr.loaded / xhr.total * 100) + '% loaded');
    },
    // Optional: Error callback
    function (error) {
      console.error('An error occurred while loading the PLY file:', error);
      container.innerHTML = '<p style="color: red;">Failed to load 3D model. Check console for details.</p>';
    }
  );

  // --- Animation Loop ---
  function animate() {
    requestAnimationFrame(animate);
    controls.update(); // Only required if controls.enableDamping or controls.autoRotate are set to true
    renderer.render(scene, camera);
  }
  animate();

  // --- Handle Window Resizing ---
  window.addEventListener('resize', () => {
    camera.aspect = container.clientWidth / container.clientHeight;
    camera.updateProjectionMatrix();
    renderer.setSize(container.clientWidth, container.clientHeight);
  });

</script>

```
