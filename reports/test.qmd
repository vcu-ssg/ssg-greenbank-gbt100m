---
title: test page
format:
  html:
    include-in-header:
      text: |
        <style>
          .viewer-row {
            display: flex;
            gap: 10px;
            justify-content: center;
            flex-wrap: wrap;
          }
          .threejs-container {
            width: 100%;
            //height: 45vh;
            aspect-ratio: 1 / 1;
            background-color: #f0f0f0;
            border: 1px solid #ccc;
            box-shadow: 2px 2px 5px rgba(0,0,0,0.2);
          }
          .viewer-row {
            display: flex;
            justify-content: space-between;
            gap: 1rem;
          }

          .viewer-block {
            width: 45%;
          }

          .viewer-block h3 {
            margin-bottom: 0.5rem;
            text-align: center;
          }
          .threejs-container img {
            width: 100%;
            height: 100%;
            object-fit: contain;  /* preserves aspect ratio */
            display: block;       /* removes inline whitespace */
          }
          .stats-table {
            width: 100%;
            border-collapse: collapse;
            font-size: 0.9rem;
            table-layout: fixed;
            word-wrap: break-word;
          }
          .stats-table th, .stats-table td {
            padding: 6px 8px;
            text-align: left;
            vertical-align: top;
            border: none;
          }
          .stats-table th {
            font-weight: bold;
          }
        </style>
---

```{python}
#| echo: false


import shutil
import pandas as pd

root = "DJI_0145-jpg_base_1.60_1600"

input  = f"../projects/{root}/colmap/sparse/0.ply"
model1 = f"../docs/data/{root}-0.ply"
x = shutil.copyfile( input, model1 )

input  = f"../projects/{root}/colmap/sparse/0_clean.ply"
model2 = f"../docs/data/{root}-0_clean.ply"
x = shutil.copyfile( input, model2 )

input = f"../projects/{root}/images/{root}_00001.jpg"
initial_image = f"../docs/data/{root}-image.jpg"
x = shutil.copyfile( input, initial_image )


def parse_root_to_table(root: str) -> pd.DataFrame:
    try:
        # Split video from the rest
        video_part, rest = root.split('-', 1)
        # Split the rest on underscore
        fmt, fltr, fps, maxwidth = rest.split('_')

        data = {
            'Field': ['Video', 'Format', 'Filter', 'FPS', 'Max Width'],
            'Value': [video_part, fmt, fltr, fps, maxwidth]
        }

        return pd.DataFrame(data)

    except ValueError:
        raise ValueError("Input string is not in expected format: 'Video-Format_Filter_FPS_MaxWidth'")

df = parse_root_to_table(root)

# To render in Quarto/HTML:
html_table = df.to_html(index=False, classes="stats-table", border=0)


data = [
    ["--min-track-len", 5],
    ["--max-reproj-error", 1.0],
    ["--min-tri-angle", 5.0]
]

df = pd.DataFrame(data, columns=["Parameter", "Value"])
html_table2 = df.to_html(index=False, classes="stats-table", border=0)

```



```{python}
#| echo: false
#| output: asis

print(f"""

<div class="viewer-row">
<div class="viewer-block">
<h3>Initial model</h3>
<div id="viewer1" class="threejs-container"></div>
<p>No cleaning to point cloud.</p>
</div>
<div class="viewer-block">
<h3>Cleaned model</h3>
<div id="viewer2" class="threejs-container"></div>
<div>{html_table2}</div>
</div>
</div>

<div class="viewer-row">
<div class="viewer-block">
<h3>Stats</h3>
<div class="threejs-container">{ html_table }</div>
</div>
<div class="viewer-block">
<h3>Initial photo</h3>
<div class="threejs-container"><img src="./data/{root}-image.jpg"/></div>
</div>
</div>

""")

```

```{=html}

<script type="module">
  import { loadPLYViewer } from "./js/ply_viewer.js";

  loadPLYViewer("viewer1", "./data/DJI_0145-jpg_base_1.60_1600-0.ply");
  loadPLYViewer("viewer2", "./data/DJI_0145-jpg_base_1.60_1600-0_clean.ply");
</script>
```
